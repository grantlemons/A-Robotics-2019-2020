package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;


@TeleOp(name="Basic: Linear OpMode", group="Linear Opmode")

public class MecanumTest1 extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor leftFront = null;
    private DcMotor leftBack = null;
    private DcMotor rightFront = null;
    private DcMotor rightBack = null;
    
    //Define Hardware
    public void hardwareInit() {
        //Hardware Map
        leftFront  = hardwareMap.get(DcMotor.class, "leftfront");
        rightFront = hardwareMap.get(DcMotor.class, "rightfront");
        leftBack = hardwareMap.get(DcMotor.class, "leftback");
        rightBack = hardwareMap.get(DcMotor.class, "rightback");
        //Direction Setting
        leftFront.setDirection(DcMotor.Direction.FORWARD);
        rightFront.setDirection(DcMotor.Direction.REVERSE);
        leftBack.setDirection(DcMotor.Direction.FORWARD);
        rightBack.setDirection(DcMotor.Direction.REVERSE);
    }
    
    //Right It's Self
    public void selfRight() {
    bool selfRight gamepad1.y;
    double AutoPower = 0.5;
    while (selfRight == 1) {
        if ( > 0) {
            leftFront.setPower(AutoPower);
            rightFront.setPower(AutoPower);
            leftBack.setPower(AutoPower);
            rightBack.setPower(AutoPower);
        } else if ( < 0) {
            leftFront.setPower(AutoPower);
            rightFront.setPower(AutoPower);
            leftBack.setPower(AutoPower);
            rightBack.setPower(AutoPower);
        }
    }
    }
    //Run Opmode
    @Override
    public void runOpMode() {
        hardwareInit();
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();
        runtime.reset();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry
            double leftFrontPower;
            double rightFrontPower;
            double leftBackPower;
            double rightFrontPower;
            //Inputs
            double drive = -gamepad1.left_stick_y;
            double strafe  = gamepad1.left_stick_x;
            double turn = gamepad1.right_stick_x;
            leftPower    = Range.clip(drive, -1.0);
            rightPower   = Range.clip(drive, -1.0);
            //if stick is positive
            if(strafe>=0){
            leftFrontPower   = Range.clip(strafe, 1.0);
            rightFrontPower  = Range.clip(strafe, -1.0);
            leftBackPower  = Range.clip(strafe, -1.0);
            rightBackPower = Range.clip(strafe, 1.0);
            }
            //If stick is negative
            else{
            leftFrontPower   = Range.clip(strafe, -1.0);
            rightFrontPower  = Range.clip(strafe, 1.0);
            leftBackPower  = Range.clip(strafe, 1.0);
            rightBackPower = Range.clip(strafe, -1.0);
            }
            //Add Together
            double leftFrontPowerCalculated = leftPower + leftFrontPower;
            double rightFrontPowerCalculated = rightPower + rightFrontPower;
            double leftBackPowerCalculated = leftPower + leftBackPower;
            double rightBackPowerCalculated = rightPower + rightBackPower;
            double leftPowerCalculated = leftBackPowerCalculated + leftFrontPowerCalculated;
            double rightPowerCalculated = leftBackPowerCalculated + leftFrontPowerCalculated;

            // Send calculated power to wheels
            leftFront.setPower(leftFrontPowerCalculated);
            rightFront.setPower(rightFrontPowerCalculated);
            leftBack.setPower(leftBackPowerCalculated);
            rightBack.setPower(rightBackPowerCalculated);
            

            // Show the elapsed game time and wheel power.
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "LF (%.2f), RF (%.2f), LB (%.2f), RB (%.2f)", leftFrontPowerCalculated, rightFrontPowerCalculated, leftBackPowerCalculated, rightBackPowerCalculated);
            telemetry.update();
        }
    }
}
